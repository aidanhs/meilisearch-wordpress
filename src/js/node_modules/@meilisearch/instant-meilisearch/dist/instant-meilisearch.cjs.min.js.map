{"version":3,"file":"instant-meilisearch.cjs.min.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["function removeUndefinedFromObject(object) {\n  return Object.keys(object).reduce((result, key) => {\n    if (object[key] !== undefined) {\n      result[key] = object[key]\n    }\n    return result\n  }, {})\n}\n\nfunction isString(str) {\n  return typeof str === 'string' || str instanceof String\n}\n\nexport { isString, removeUndefinedFromObject }\n","import MeiliSearch from 'meilisearch'\nimport { isString, removeUndefinedFromObject } from './utils.js'\n\nexport default function instantMeiliSearch(hostUrl, apiKey, options = {}) {\n  return {\n    client: new MeiliSearch({ host: hostUrl, apiKey: apiKey }),\n    hitsPerPage: options.hitsPerPage || 10,\n    limitPerRequest: options.limitPerRequest || 50,\n    attributesToHighlight: '*',\n\n    transformToMeiliSearchParams: function (params) {\n      const searchInput = {\n        q: params.query,\n        facetsDistribution: params.facets.length ? params.facets : undefined,\n        facetFilters: params.facetFilters,\n        attributesToHighlight: this.attributesToHighlight,\n        limit: this.limitPerRequest,\n      }\n      return removeUndefinedFromObject(searchInput)\n    },\n\n    replaceHighlightTags: function (\n      formattedHit,\n      highlightPreTag,\n      highlightPostTag\n    ) {\n      // formattedHit is the `_formatted` object returned by MeiliSearch.\n      // It contains all the highlighted attributes\n      return Object.keys(formattedHit).reduce((result, key) => {\n        let newHighlightString = formattedHit[key]\n        // If the value of the attribute is a string,\n        // the highlight is applied by MeiliSearch (<em> tags)\n        // and we replace the <em> by the expected tag for InstantSearch\n        if (isString(formattedHit[key])) {\n          newHighlightString = formattedHit[key]\n            .replaceAll('<em>', highlightPreTag)\n            .replaceAll('</em>', highlightPostTag)\n        }\n        result[key] = { value: newHighlightString.toString() }\n        return result\n      }, {})\n    },\n\n    parseHits: function (meiliSearchHits, params) {\n      if (params.page !== undefined) {\n        // If there is a pagination widget set\n        const hitsPerPage = this.hitsPerPage\n        const start = params.page * hitsPerPage\n        meiliSearchHits = meiliSearchHits.splice(start, this.hitsPerPage)\n      }\n\n      return meiliSearchHits.map((hit) => {\n        const formattedHit = hit._formatted\n        delete hit._formatted\n        return {\n          ...hit,\n          _highlightResult: this.replaceHighlightTags(\n            formattedHit,\n            params.highlightPreTag,\n            params.highlightPostTag\n          ),\n        }\n      })\n    },\n\n    paginationParams: function (hitsLength, params) {\n      if (params.page !== undefined) {\n        const adjust = hitsLength % this.hitsPerPage === 0 ? 0 : 1\n        const nbPages = Math.floor(hitsLength / this.hitsPerPage) + adjust\n        return {\n          nbPages: nbPages, // total number of pages\n          page: params.page, // the current page, information sent by InstantSearch\n        }\n      }\n    },\n\n    parseMeiliSearchResponse: function (indexUid, meiliSearchResponse, params) {\n      this.hitsPerPage = params.hitsPerPage || this.hitsPerPage\n      const {\n        exhaustiveFacetsCount,\n        exhaustiveNbHits,\n        facetsDistribution: facets,\n        nbHits,\n        processingTimeMs,\n        query,\n        hits,\n      } = meiliSearchResponse\n\n      const parsedResponse = {\n        index: indexUid,\n        hitsPerPage: this.hitsPerPage,\n        facets,\n        exhaustiveFacetsCount,\n        exhaustiveNbHits,\n        nbHits,\n        processingTimeMs,\n        query,\n        ...this.paginationParams(hits.length, params),\n        hits: this.parseHits(hits, params), // Apply pagination + highlight\n      }\n\n      return {\n        results: [removeUndefinedFromObject(parsedResponse)],\n      }\n    },\n\n    search: async function (requests) {\n      // Gets information from IS and transforms it for MeiliSearch\n      const searchInput = this.transformToMeiliSearchParams(requests[0].params)\n      const indexUid = requests[0].indexName\n      // Executes the search with MeiliSearch\n      const searchResponse = await this.client\n        .getIndex(indexUid)\n        .search(searchInput.q, searchInput)\n      // Parses the MeiliSearch response and returns it for InstantSearch\n      return this.parseMeiliSearchResponse(\n        indexUid,\n        searchResponse,\n        requests[0].params\n      )\n    },\n  }\n}\n"],"names":["removeUndefinedFromObject","object","Object","keys","reduce","result","key","undefined","hostUrl","apiKey","options","client","MeiliSearch","host","hitsPerPage","limitPerRequest","attributesToHighlight","transformToMeiliSearchParams","params","q","query","facetsDistribution","facets","length","facetFilters","this","limit","replaceHighlightTags","formattedHit","highlightPreTag","highlightPostTag","newHighlightString","str","String","replaceAll","value","toString","parseHits","meiliSearchHits","page","start","splice","map","hit","_formatted","_highlightResult","paginationParams","hitsLength","adjust","nbPages","Math","floor","parseMeiliSearchResponse","indexUid","meiliSearchResponse","exhaustiveFacetsCount","exhaustiveNbHits","nbHits","processingTimeMs","hits","results","index","search","async","requests","searchInput","indexName","searchResponse","getIndex"],"mappings":"+FAAA,SAASA,EAA0BC,GACjC,OAAOC,OAAOC,KAAKF,GAAQG,OAAO,CAACC,EAAQC,UACrBC,IAAhBN,EAAOK,KACTD,EAAOC,GAAOL,EAAOK,IAEhBD,GACN,mBCHU,SAA4BG,EAASC,EAAQC,EAAU,IACpE,MAAO,CACLC,OAAQ,IAAIC,EAAY,CAAEC,KAAML,EAASC,OAAQA,IACjDK,YAAaJ,EAAQI,aAAe,GACpCC,gBAAiBL,EAAQK,iBAAmB,GAC5CC,sBAAuB,IAEvBC,6BAA8B,SAAUC,GAQtC,OAAOlB,EAPa,CAClBmB,EAAGD,EAAOE,MACVC,mBAAoBH,EAAOI,OAAOC,OAASL,EAAOI,YAASf,EAC3DiB,aAAcN,EAAOM,aACrBR,sBAAuBS,KAAKT,sBAC5BU,MAAOD,KAAKV,mBAKhBY,qBAAsB,SACpBC,EACAC,EACAC,GAIA,OAAO5B,OAAOC,KAAKyB,GAAcxB,OAAO,CAACC,EAAQC,KAC/C,IAAIyB,EAAqBH,EAAatB,GDpB9C,IAAkB0B,EC8BV,OD7BgB,iBADNA,ECwBGJ,EAAatB,KDvBE0B,aAAeC,UCwBzCF,EAAqBH,EAAatB,GAC/B4B,WAAW,OAAQL,GACnBK,WAAW,QAASJ,IAEzBzB,EAAOC,GAAO,CAAE6B,MAAOJ,EAAmBK,YACnC/B,GACN,KAGLgC,UAAW,SAAUC,EAAiBpB,GACpC,QAAoBX,IAAhBW,EAAOqB,KAAoB,CAE7B,MAAMzB,EAAcW,KAAKX,YACnB0B,EAAQtB,EAAOqB,KAAOzB,EAC5BwB,EAAkBA,EAAgBG,OAAOD,EAAOf,KAAKX,aAGvD,OAAOwB,EAAgBI,IAAKC,IAC1B,MAAMf,EAAee,EAAIC,WAEzB,cADOD,EAAIC,WACJ,IACFD,EACHE,iBAAkBpB,KAAKE,qBACrBC,EACAV,EAAOW,gBACPX,EAAOY,sBAMfgB,iBAAkB,SAAUC,EAAY7B,GACtC,QAAoBX,IAAhBW,EAAOqB,KAAoB,CAC7B,MAAMS,EAASD,EAAatB,KAAKX,aAAgB,EAAI,EAAI,EAEzD,MAAO,CACLmC,QAFcC,KAAKC,MAAMJ,EAAatB,KAAKX,aAAekC,EAG1DT,KAAMrB,EAAOqB,QAKnBa,yBAA0B,SAAUC,EAAUC,EAAqBpC,GACjEO,KAAKX,YAAcI,EAAOJ,aAAeW,KAAKX,YAC9C,MAAMyC,sBACJA,EAAqBC,iBACrBA,EACAnC,mBAAoBC,EAAMmC,OAC1BA,EAAMC,iBACNA,EAAgBtC,MAChBA,EAAKuC,KACLA,GACEL,EAeJ,MAAO,CACLM,QAAS,CAAC5D,EAdW,CACrB6D,MAAOR,EACPvC,YAAaW,KAAKX,YAClBQ,OAAAA,EACAiC,sBAAAA,EACAC,iBAAAA,EACAC,OAAAA,EACAC,iBAAAA,EACAtC,MAAAA,KACGK,KAAKqB,iBAAiBa,EAAKpC,OAAQL,GACtCyC,KAAMlC,KAAKY,UAAUsB,EAAMzC,QAQ/B4C,OAAQC,eAAgBC,GAEtB,MAAMC,EAAcxC,KAAKR,6BAA6B+C,EAAS,GAAG9C,QAC5DmC,EAAWW,EAAS,GAAGE,UAEvBC,QAAuB1C,KAAKd,OAC/ByD,SAASf,GACTS,OAAOG,EAAY9C,EAAG8C,GAEzB,OAAOxC,KAAK2B,yBACVC,EACAc,EACAH,EAAS,GAAG9C"}