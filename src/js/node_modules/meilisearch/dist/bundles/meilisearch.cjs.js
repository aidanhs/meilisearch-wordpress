'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var instance = _interopDefault(require('axios'));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var MeiliSearchTimeOutError = /** @class */ (function (_super) {
    __extends(MeiliSearchTimeOutError, _super);
    function MeiliSearchTimeOutError(message) {
        var _this = _super.call(this, message) || this;
        _this.name = 'MeiliSearchTimeOutError';
        _this.type = _this.constructor.name;
        Error.captureStackTrace(_this, MeiliSearchTimeOutError);
        return _this;
    }
    return MeiliSearchTimeOutError;
}(Error));

var MeiliSearchApiError = /** @class */ (function (_super) {
    __extends(class_1, _super);
    function class_1(error, cachedStack) {
        var _a;
        var _this = _super.call(this, error.message) || this;
        _this.type = 'MeiliSearchApiError';
        _this.name = 'MeiliSearchApiError';
        // Fetch the native error message but add our application name in front of it.
        // This means slicing the "Error" string at the start of the message.
        if (error.response !== undefined) {
            _this.response = {
                status: error.response.status,
                statusText: error.response.statusText,
                path: error.response.config.url,
                method: error.response.config.method,
            };
            // If a custom message was sent back by our API
            // We change the error message to be more explicit
            if (((_a = error.response.data) === null || _a === void 0 ? void 0 : _a.message) !== undefined) {
                _this.errorCode = error.response.data.errorCode;
                _this.errorType = error.response.data.errorType;
                _this.errorLink = error.response.data.errorLink;
                _this.message = error.response.data.message;
            }
        }
        // use cached Stack on error object to keep the call stack
        if (cachedStack !== undefined && error.stack !== undefined) {
            _this.stack = _this.name + ": " + _this.message + "\n" + cachedStack
                .split('\n')
                .slice(1)
                .join('\n');
        }
        return _this;
    }
    return class_1;
}(Error));

var MeiliSearchCommunicationError = /** @class */ (function (_super) {
    __extends(MeiliSearchCommunicationError, _super);
    function MeiliSearchCommunicationError(message) {
        var _this = _super.call(this, message) || this;
        _this.name = 'MeiliSearchCommunicationError';
        _this.type = 'MeiliSearchCommunicationError';
        Error.captureStackTrace(_this, MeiliSearchCommunicationError);
        return _this;
    }
    return MeiliSearchCommunicationError;
}(Error));

function httpErrorHandler(e, cachedStack) {
    if (e.response !== undefined) {
        throw new MeiliSearchApiError(e, cachedStack);
    }
    else if (e.isAxiosError === true) {
        throw new MeiliSearchCommunicationError(e.message);
    }
    else {
        throw e;
    }
}

/*
 * Bundle: MeiliSearch
 * Project: MeiliSearch - Javascript API
 * Author: Quentin de Quelen <quentin@meilisearch.com>
 * Copyright: 2019, MeiliSearch
 */
var MeiliAxiosWrapper = /** @class */ (function () {
    function MeiliAxiosWrapper(config) {
        if (config.apiKey !== undefined) {
            this.instance = instance.create({
                baseURL: config.host,
                headers: {
                    'X-Meili-API-Key': config.apiKey,
                },
            });
        }
        else {
            this.instance = instance.create({
                baseURL: config.host,
            });
        }
        this.cancelTokenSource = instance.CancelToken.source();
        this.instance.interceptors.response.use(function (response) { return response.data; });
        this.instance.interceptors.request.use(function (request) {
            if (request.data !== undefined) {
                return __assign(__assign({}, request), { data: JSON.stringify(request.data) });
            }
            return request;
        });
    }
    MeiliAxiosWrapper.prototype.get = function (url, config) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedStack, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedStack = new Error().stack;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.instance.get(url, config)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_1 = _a.sent();
                        throw httpErrorHandler(e_1, cachedStack);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    MeiliAxiosWrapper.prototype.post = function (url, data, config) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedStack, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedStack = new Error().stack;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.instance.post(url, data, config)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_2 = _a.sent();
                        throw httpErrorHandler(e_2, cachedStack);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    MeiliAxiosWrapper.prototype.put = function (url, data, config) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedStack, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedStack = new Error().stack;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.instance.put(url, data, config)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_3 = _a.sent();
                        throw httpErrorHandler(e_3, cachedStack);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    MeiliAxiosWrapper.prototype.patch = function (url, data, config) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedStack, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedStack = new Error().stack;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.instance.patch(url, data, config)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_4 = _a.sent();
                        throw httpErrorHandler(e_4, cachedStack);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    MeiliAxiosWrapper.prototype["delete"] = function (url, config) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedStack, e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedStack = new Error().stack;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.instance["delete"](url, config)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_5 = _a.sent();
                        throw httpErrorHandler(e_5, cachedStack);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return MeiliAxiosWrapper;
}());

function sleep(ms) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, ms); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}

/*
 * Bundle: MeiliSearch / Indexes
 * Project: MeiliSearch - Javascript API
 * Author: Quentin de Quelen <quentin@meilisearch.com>
 * Copyright: 2019, MeiliSearch
 */
var Index = /** @class */ (function (_super) {
    __extends(Index, _super);
    function Index(config, uid) {
        var _this = _super.call(this, config) || this;
        _this.uid = uid;
        return _this;
    }
    ///
    /// UPDATES
    ///
    /**
     * Get the informations about an update status
     * @memberof Index
     * @method getUpdateStatus
     */
    Index.prototype.getUpdateStatus = function (updateId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/updates/" + updateId;
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Index.prototype.waitForPendingUpdate = function (updateId, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
        return __awaiter(this, void 0, void 0, function () {
            var startingTime, response;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        startingTime = Date.now();
                        _e.label = 1;
                    case 1:
                        if (!(Date.now() - startingTime < timeOutMs)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.getUpdateStatus(updateId)];
                    case 2:
                        response = _e.sent();
                        if (response.status !== 'enqueued')
                            return [2 /*return*/, response];
                        return [4 /*yield*/, sleep(intervalMs)];
                    case 3:
                        _e.sent();
                        return [3 /*break*/, 1];
                    case 4: throw new MeiliSearchTimeOutError("timeout of " + timeOutMs + "ms has exceeded on process " + updateId + " when waiting for pending update to resolve.");
                }
            });
        });
    };
    /**
     * Get the list of all updates
     * @memberof Index
     * @method getAllUpdateStatus
     */
    Index.prototype.getAllUpdateStatus = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/updates";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// SEARCH
    ///
    /**
     * Search for documents into an index
     * @memberof Index
     * @method search
     */
    Index.prototype.search = function (query, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/search";
                        params = {
                            q: query,
                        };
                        if (options !== undefined) {
                            if (options.offset !== undefined) {
                                params.offset = options.offset;
                            }
                            if (options.limit !== undefined) {
                                params.limit = options.limit;
                            }
                            if (options.attributesToRetrieve !== undefined) {
                                if (Array.isArray(options.attributesToRetrieve)) {
                                    params.attributesToRetrieve = options.attributesToRetrieve.join(',');
                                }
                                else {
                                    params.attributesToRetrieve = options.attributesToRetrieve;
                                }
                            }
                            if (options.attributesToCrop !== undefined) {
                                if (Array.isArray(options.attributesToCrop)) {
                                    params.attributesToCrop = options.attributesToCrop.join(',');
                                }
                                else {
                                    params.attributesToCrop = options.attributesToCrop;
                                }
                            }
                            if (options.cropLength !== undefined) {
                                params.cropLength = options.cropLength;
                            }
                            if (options.attributesToHighlight !== undefined) {
                                if (Array.isArray(options.attributesToHighlight)) {
                                    params.attributesToHighlight = options.attributesToHighlight.join(',');
                                }
                                else {
                                    params.attributesToHighlight = options.attributesToHighlight;
                                }
                            }
                            if (options.filters !== undefined) {
                                params.filters = options.filters;
                            }
                            if (options.matches !== undefined) {
                                params.matches = options.matches;
                            }
                            if (options.facetFilters !== undefined) {
                                params.facetFilters = JSON.stringify(options.facetFilters);
                            }
                            if (options.facetsDistribution !== undefined) {
                                params.facetsDistribution = JSON.stringify(options.facetsDistribution);
                            }
                        }
                        return [4 /*yield*/, this.get(url, {
                                params: params,
                                cancelToken: this.cancelTokenSource.token,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// INDEX
    ///
    /**
     * Show index information.
     * @memberof Index
     * @method show
     */
    Index.prototype.show = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid;
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update an index.
     * @memberof Index
     * @method updateIndex
     */
    Index.prototype.updateIndex = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid;
                        return [4 /*yield*/, this.put(url, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete an index.
     * @memberof Index
     * @method deleteIndex
     */
    Index.prototype.deleteIndex = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid;
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// STATS
    ///
    /**
     * get stats of an index
     * @memberof Index
     * @method getStats
     */
    Index.prototype.getStats = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/stats";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// DOCUMENTS
    ///
    /**
     * get documents of an index
     * @memberof Index
     * @method getDocuments
     */
    Index.prototype.getDocuments = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, attr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents";
                        if (options !== undefined && Array.isArray(options.attributesToRetrieve)) {
                            attr = options.attributesToRetrieve.join(',');
                        }
                        return [4 /*yield*/, this.get(url, {
                                params: __assign(__assign({}, options), (attr !== undefined ? { attributesToRetrieve: attr } : {})),
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get one document
     * @memberof Index
     * @method getDocument
     */
    Index.prototype.getDocument = function (documentId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents/" + documentId;
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Add or replace multiples documents to an index
     * @memberof Index
     * @method addDocuments
     */
    Index.prototype.addDocuments = function (documents, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents";
                        return [4 /*yield*/, this.post(url, documents, {
                                params: options,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Add or update multiples documents to an index
     * @memberof Index
     * @method updateDocuments
     */
    Index.prototype.updateDocuments = function (documents, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents";
                        return [4 /*yield*/, this.put(url, documents, {
                                params: options,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete one document
     * @memberof Index
     * @method deleteDocument
     */
    Index.prototype.deleteDocument = function (documentId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents/" + documentId;
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete multiples documents of an index
     * @memberof Index
     * @method deleteDocuments
     */
    Index.prototype.deleteDocuments = function (documentsIds) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents/delete-batch";
                        return [4 /*yield*/, this.post(url, documentsIds)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete all documents of an index
     * @memberof Index
     * @method deleteAllDocuments
     */
    Index.prototype.deleteAllDocuments = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// SETTINGS
    ///
    /**
     * Retrieve all settings
     * @memberof Index
     * @method getSettings
     */
    Index.prototype.getSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update all settings
     * Any parameters not provided will be left unchanged.
     * @memberof Index
     * @method updateSettings
     */
    Index.prototype.updateSettings = function (settings) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings";
                        return [4 /*yield*/, this.post(url, settings)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset settings.
     * @memberof Index
     * @method resetSettings
     */
    Index.prototype.resetSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// SYNONYMS
    ///
    /**
     * Get the list of all synonyms
     * @memberof Index
     * @method getSynonyms
     */
    Index.prototype.getSynonyms = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/synonyms";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the list of synonyms. Overwrite the old list.
     * @memberof Index
     * @method updateSynonyms
     */
    Index.prototype.updateSynonyms = function (synonyms) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/synonyms";
                        return [4 /*yield*/, this.post(url, synonyms)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset the synonym list to be empty again
     * @memberof Index
     * @method resetSynonyms
     */
    Index.prototype.resetSynonyms = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/synonyms";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// STOP WORDS
    ///
    /**
     * Get the list of all stop-words
     * @memberof Index
     * @method getStopWords
     */
    Index.prototype.getStopWords = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/stop-words";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the list of stop-words. Overwrite the old list.
     * @memberof Index
     * @method updateStopWords
     */
    Index.prototype.updateStopWords = function (stopWords) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/stop-words";
                        return [4 /*yield*/, this.post(url, stopWords)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset the stop-words list to be empty again
     * @memberof Index
     * @method resetStopWords
     */
    Index.prototype.resetStopWords = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/stop-words";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// RANKING RULES
    ///
    /**
     * Get the list of all ranking-rules
     * @memberof Index
     * @method getRankingRules
     */
    Index.prototype.getRankingRules = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/ranking-rules";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the list of ranking-rules. Overwrite the old list.
     * @memberof Index
     * @method updateRankingRules
     */
    Index.prototype.updateRankingRules = function (rankingRules) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/ranking-rules";
                        return [4 /*yield*/, this.post(url, rankingRules)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset the ranking rules list to its default value
     * @memberof Index
     * @method resetRankingRules
     */
    Index.prototype.resetRankingRules = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/ranking-rules";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// DISTINCT ATTRIBUTE
    ///
    /**
     * Get the distinct-attribute
     * @memberof Index
     * @method getDistinctAttribute
     */
    Index.prototype.getDistinctAttribute = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/distinct-attribute";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the distinct-attribute.
     * @memberof Index
     * @method updateDistinctAttribute
     */
    Index.prototype.updateDistinctAttribute = function (distinctAttribute) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/distinct-attribute";
                        return [4 /*yield*/, this.post(url, distinctAttribute)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset the distinct-attribute.
     * @memberof Index
     * @method resetDistinctAttribute
     */
    Index.prototype.resetDistinctAttribute = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/distinct-attribute";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// ATTRIBUTES FOR FACETING
    ///
    /**
     * Get the attributes-for-faceting
     * @memberof Index
     * @method getAttributesForFaceting
     */
    Index.prototype.getAttributesForFaceting = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/attributes-for-faceting";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the attributes-for-faceting.
     * @memberof Index
     * @method updateAttributesForFaceting
     */
    Index.prototype.updateAttributesForFaceting = function (attributesForFaceting) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/attributes-for-faceting";
                        return [4 /*yield*/, this.post(url, attributesForFaceting)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset the attributes-for-faceting.
     * @memberof Index
     * @method resetAttributesForFaceting
     */
    Index.prototype.resetAttributesForFaceting = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/attributes-for-faceting";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// SEARCHABLE ATTRIBUTE
    ///
    /**
     * Get the searchable-attributes
     * @memberof Index
     * @method getSearchableAttributes
     */
    Index.prototype.getSearchableAttributes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/searchable-attributes";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the searchable-attributes.
     * @memberof Index
     * @method updateSearchableAttributes
     */
    Index.prototype.updateSearchableAttributes = function (searchableAttributes) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/searchable-attributes";
                        return [4 /*yield*/, this.post(url, searchableAttributes)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset the searchable-attributes.
     * @memberof Index
     * @method resetSearchableAttributes
     */
    Index.prototype.resetSearchableAttributes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/searchable-attributes";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// DISPLAYED ATTRIBUTE
    ///
    /**
     * Get the displayed-attributes
     * @memberof Index
     * @method getDisplayedAttributes
     */
    Index.prototype.getDisplayedAttributes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/displayed-attributes";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the displayed-attributes.
     * @memberof Index
     * @method updateDisplayedAttributes
     */
    Index.prototype.updateDisplayedAttributes = function (displayedAttributes) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/displayed-attributes";
                        return [4 /*yield*/, this.post(url, displayedAttributes)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset the displayed-attributes.
     * @memberof Index
     * @method resetDisplayedAttributes
     */
    Index.prototype.resetDisplayedAttributes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/displayed-attributes";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// ACCEPT NEW FIELDS
    ///
    /**
     * Get the accept-new-fields value.
     * @memberof Index
     * @method getAcceptNewFields
     */
    Index.prototype.getAcceptNewFields = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/accept-new-fields";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the accept-new-fields value.
     * @memberof Index
     * @method updateAcceptNewFields
     */
    Index.prototype.updateAcceptNewFields = function (acceptNewFields) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/accept-new-fields";
                        return [4 /*yield*/, this.post(url, acceptNewFields)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Index;
}(MeiliAxiosWrapper));

/*
 * Bundle: MeiliSearch
 * Project: MeiliSearch - Javascript API
 * Author: Quentin de Quelen <quentin@meilisearch.com>
 * Copyright: 2019, MeiliSearch
 */
var MeiliSearch = /** @class */ (function (_super) {
    __extends(MeiliSearch, _super);
    function MeiliSearch(config) {
        var _this = _super.call(this, config) || this;
        _this.config = config;
        return _this;
    }
    /**
     * Return an Index instance
     * @memberof MeiliSearch
     * @method getIndex
     */
    MeiliSearch.prototype.getIndex = function (indexUid) {
        return new Index(this.config, indexUid);
    };
    /**
     * Get an index or create it if it does not exist
     * @memberof MeiliSearch
     * @method getOrCreateIndex
     */
    MeiliSearch.prototype.getOrCreateIndex = function (uid, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var index, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.createIndex(uid, options)];
                    case 1:
                        index = _a.sent();
                        return [2 /*return*/, index];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1.errorCode === 'index_already_exists') {
                            return [2 /*return*/, this.getIndex(uid)];
                        }
                        throw e_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * List all indexes in the database
     * @memberof MeiliSearch
     * @method listIndexes
     */
    MeiliSearch.prototype.listIndexes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/indexes';
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Create a new index
     * @memberof MeiliSearch
     * @method createIndex
     */
    MeiliSearch.prototype.createIndex = function (uid, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var url, index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/indexes';
                        return [4 /*yield*/, this.post(url, __assign(__assign({}, options), { uid: uid }))];
                    case 1:
                        index = _a.sent();
                        return [2 /*return*/, new Index(this.config, index.uid)];
                }
            });
        });
    };
    ///
    /// KEYS
    ///
    /**
     * Get private and public key
     * @memberof MeiliSearch
     * @method getKey
     */
    MeiliSearch.prototype.getKeys = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/keys';
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// HEALTH
    ///
    /**
     * Check if the server is healhty
     * @memberof MeiliSearch
     * @method isHealthy
     */
    MeiliSearch.prototype.isHealthy = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/health';
                        return [4 /*yield*/, this.get(url).then(function (_) { return true; })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Change the healthyness to healthy
     * @memberof MeiliSearch
     * @method setHealthy
     */
    MeiliSearch.prototype.setHealthy = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/health';
                        return [4 /*yield*/, this.put(url, {
                                health: true,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Change the healthyness to unhealthy
     * @memberof MeiliSearch
     * @method setUnhealthy
     */
    MeiliSearch.prototype.setUnhealthy = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/health';
                        return [4 /*yield*/, this.put(url, {
                                health: false,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Set the healthyness to health value
     * @memberof MeiliSearch
     * @method changeHealthTo
     */
    MeiliSearch.prototype.changeHealthTo = function (health) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/health';
                        return [4 /*yield*/, this.put(url, {
                                health: health,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// STATS
    ///
    /**
     * Get the stats of all the database
     * @memberof MeiliSearch
     * @method stats
     */
    MeiliSearch.prototype.stats = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/stats';
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get the version of MeiliSearch
     * @memberof MeiliSearch
     * @method version
     */
    MeiliSearch.prototype.version = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/version';
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get the server consuption, RAM / CPU / Network
     * @memberof MeiliSearch
     * @method sysInfo
     */
    MeiliSearch.prototype.sysInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/sys-info';
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get the server consuption, RAM / CPU / Network. All information as human readable
     * @memberof MeiliSearch
     * @method prettySysInfo
     */
    MeiliSearch.prototype.prettySysInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/sys-info/pretty';
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return MeiliSearch;
}(MeiliAxiosWrapper));

module.exports = MeiliSearch;
